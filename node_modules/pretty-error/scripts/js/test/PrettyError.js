var PrettyError, error;

require('./_prepare');

error = function(what) {
  var e;
  if (typeof what === 'string') {
    return error(function() {
      throw Error(what);
    });
  } else if (what instanceof Function) {
    try {
      what();
    } catch (_error) {
      e = _error;
      return e;
    }
  }
  throw Error("bad argument for error");
};

PrettyError = mod('PrettyError');

describe("constructor()");

it("should work", function() {
  var p;
  return p = new PrettyError;
});

describe("getObject");

it("should return a string", function() {
  var p;
  p = new PrettyError;
  return p.getObject(error("hello")).should.be.an('object');
});

describe("style");

it("should, by default, return the contents in prettyError/defaultStyle", function() {
  var defaultStyle, p;
  p = new PrettyError;
  defaultStyle = mod('prettyError/defaultStyle');
  return p.style.should.be.like(defaultStyle());
});

it("should return different contents after appending some styles", function() {
  var defaultStyle, p;
  p = new PrettyError;
  p.appendStyle({
    'some selector': {
      'display': 'block'
    }
  });
  defaultStyle = mod('prettyError/defaultStyle');
  return p.style.should.not.be.like(defaultStyle());
});

describe("render()");

it("should work", function() {
  var e, e2, e3, e4, e5, p;
  p = new PrettyError;
  p.skipNodeFiles();
  p.appendStyle({
    'pretty-error': {
      marginLeft: 4
    }
  });
  e = error(function() {
    return "a".should.equal("b");
  });
  console.log(p.render(e, false));
  e2 = error(function() {
    return Array.split(Object);
  });
  console.log(p.render(e2, false));
  e3 = "Plain error message";
  console.log(p.render(e3, false));
  e4 = {
    message: "Custom error message",
    kind: "Custom Error"
  };
  console.log(p.render(e4, false));
  e5 = {
    message: "Error with custom stack",
    stack: ['line one', 'line two'],
    wrapper: 'UnhandledRejection'
  };
  return console.log(p.render(e5, false));
});
