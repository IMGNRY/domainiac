var path, pathToLib;

path = require('path');

pathToLib = path.resolve(__dirname, '../lib');

require('little-popo')(pathToLib);

//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"_prepare.js","sourceRoot":"..\\..","sources":["coffee\\test\\_prepare.coffee"],"names":[],"mappings":"AAAA,IAAA,eAAA;;AQAA,IQAA,GQAO,OQAA,CQAQ,MQAR,CAAP,CAAA;;AQEA,SQAA,GQAY,IQAI,CQAC,OQAL,CQAa,SQAb,EQAwB,QQAxB,CAFZ,CAAA;;AQIA,OQAA,CQAQ,aQAR,CQAA,CQAuB,SQAvB,CAJA,CAAA","sourcesContent":["module.exports = array =\n\n\t###\n\tTries to turn anything into an array.\n\t###\n\tfrom: (r) ->\n\n\t\tArray::slice.call r\n\n\t###\n\tClone of an array. Properties will be shallow copies.\n\t###\n\tsimpleClone: (a) ->\n\n\t\ta.slice 0\n\n\tshallowEqual: (a1, a2) ->\n\n\t\treturn no unless Array.isArray(a1) and Array.isArray(a2) and a1.length is a2.length\n\n\t\tfor val, i in a1\n\n\t\t\treturn no unless a2[i] is val\n\n\t\tyes\n\n\tpluck: (a, i) ->\n\n\t\treturn a if a.length < 1\n\n\n\t\tfor value, index in a\n\n\t\t\tif index > i\n\n\t\t\t\ta[index - 1] = a[index]\n\n\t\ta.length = a.length - 1\n\n\t\ta\n\n\tpluckItem: (a, item) ->\n\n\t\treturn a if a.length < 1\n\n\n\t\tremoved = 0\n\n\t\tfor value, index in a\n\n\t\t\tif value is item\n\n\t\t\t\tremoved++\n\n\t\t\t\tcontinue\n\n\t\t\tif removed isnt 0\n\n\t\t\t\ta[index - removed] = a[index]\n\n\t\ta.length = a.length - removed if removed > 0\n\n\t\ta\n\n\tpluckOneItem: (a, item) ->\n\n\t\treturn a if a.length < 1\n\n\t\treached = no\n\n\t\tfor value, index in a\n\n\t\t\tif not reached\n\n\t\t\t\tif value is item\n\n\t\t\t\t\treached = yes\n\n\t\t\t\t\tcontinue\n\n\t\t\telse\n\n\t\t\t\ta[index - 1] = a[index]\n\n\t\ta.length = a.length - 1 if reached\n\n\t\ta\n\n\tpluckByCallback: (a, cb) ->\n\n\t\treturn a if a.length < 1\n\n\t\tremoved = 0\n\n\t\tfor value, index in a\n\n\t\t\tif cb value, index\n\n\t\t\t\tremoved++\n\n\t\t\t\tcontinue\n\n\t\t\tif removed isnt 0\n\n\t\t\t\ta[index - removed] = a[index]\n\n\t\tif removed > 0\n\n\t\t\ta.length = a.length - removed\n\n\t\ta\n\n\tpluckMultiple: (array, indexesToRemove) ->\n\n\t\treturn array if array.length < 1\n\n\t\tremovedSoFar = 0\n\n\t\tindexesToRemove.sort()\n\n\t\tfor i in indexesToRemove\n\n\t\t\t@pluck array, i - removedSoFar\n\n\t\t\tremovedSoFar++\n\n\t\tarray\n\n\tinjectByCallback: (a, toInject, shouldInject) ->\n\n\t\tvalA = null\n\n\t\tvalB = null\n\n\t\tlen = a.length\n\n\t\tif len < 1\n\n\t\t\ta.push toInject\n\n\t\t\treturn a\n\n\n\t\tfor val, i in a\n\n\t\t\tvalA = valB\n\n\t\t\tvalB = val\n\n\t\t\tif shouldInject valA, valB, toInject\n\n\t\t\t\treturn a.splice i, 0, toInject\n\n\t\ta.push toInject\n\n\t\ta\n\n\tinjectInIndex: (a, index, toInject) ->\n\n\t\tlen = a.length\n\n\t\ti = index\n\n\t\tif len < 1\n\n\t\t\ta.push toInject\n\n\t\t\treturn a\n\n\t\ttoPut = toInject\n\n\t\ttoPutNext = null\n\n\t\t`for(; i <= len; i++){\n\n\t\t\ttoPutNext = a[i];\n\n\t\t\ta[i] = toPut;\n\n\t\t\ttoPut = toPutNext;\n\n\t\t}`\n\n\t\t# a[i] = toPut\n\n\t\tnull","module.exports = classic = {}\n\n# Little helper for mixins from CoffeeScript FAQ,\n# courtesy of Sethaurus (http://github.com/sethaurus)\nclassic.implement = (mixins..., classReference) ->\n\n\tfor mixin in mixins\n\n\t\tclassProto = classReference::\n\n\t\tfor member of mixin::\n\n\t\t\tunless Object.getOwnPropertyDescriptor classProto, member\n\n\t\t\t\tdesc = Object.getOwnPropertyDescriptor mixin::, member\n\n\t\t\t\tObject.defineProperty classProto, member, desc\n\n\tclassReference\n\nclassic.mix = (mixins..., classReference) ->\n\n\tclassProto = classReference::\n\n\tclassReference.__mixinCloners = []\n\n\tclassReference.__applyClonersFor = (instance, args = null) ->\n\n\t\tfor cloner in classReference.__mixinCloners\n\n\t\t\tcloner.apply instance, args\n\n\t\treturn\n\n\tclassReference.__mixinInitializers = []\n\n\tclassReference.__initMixinsFor = (instance, args = null) ->\n\n\t\tfor initializer in classReference.__mixinInitializers\n\n\t\t\tinitializer.apply instance, args\n\n\t\treturn\n\n\tclassReference.__mixinQuitters = []\n\n\tclassReference.__applyQuittersFor = (instance, args = null) ->\n\n\t\tfor quitter in classReference.__mixinQuitters\n\n\t\t\tquitter.apply instance, args\n\n\t\treturn\n\n\tfor mixin in mixins\n\n\t\tunless mixin.constructor instanceof Function\n\n\t\t\tthrow Error \"Mixin should be a function\"\n\n\t\tfor member of mixin::\n\n\t\t\tif member.substr(0, 11) is '__initMixin'\n\n\t\t\t\tclassReference.__mixinInitializers.push mixin::[member]\n\n\t\t\t\tcontinue\n\n\t\t\telse if member.substr(0, 11) is '__clonerFor'\n\n\t\t\t\tclassReference.__mixinCloners.push mixin::[member]\n\n\t\t\t\tcontinue\n\n\t\t\telse if member.substr(0, 12) is '__quitterFor'\n\n\t\t\t\tclassReference.__mixinQuitters.push mixin::[member]\n\n\t\t\t\tcontinue\n\n\t\t\tunless Object.getOwnPropertyDescriptor classProto, member\n\n\t\t\t\tdesc = Object.getOwnPropertyDescriptor mixin::, member\n\n\t\t\t\tObject.defineProperty classProto, member, desc\n\n\tclassReference","_common = require './_common'\n\nmodule.exports = object =\n\n\tisBareObject: _common.isBareObject.bind _common\n\n\t###\n\tif object is an instance of a class\n\t###\n\tisInstance: (what) ->\n\n\t\tnot @isBareObject what\n\n\t###\n\tAlias to _common.typeOf\n\t###\n\ttypeOf: _common.typeOf.bind _common\n\n\t###\n\tAlias to _common.clone\n\t###\n\tclone: _common.clone.bind _common\n\n\t###\n\tEmpties an object of its properties.\n\t###\n\tempty: (o) ->\n\n\t\tfor prop of o\n\n\t\t\tdelete o[prop] if o.hasOwnProperty prop\n\n\t\to\n\n\t###\n\tEmpties an object. Doesn't check for hasOwnProperty, so it's a tiny\n\tbit faster. Use it for plain objects.\n\t###\n\tfastEmpty: (o) ->\n\n\t\tdelete o[property] for property of o\n\n\t\to\n\n\t###\n\tOverrides values fomr `newValues` on `base`, as long as they\n\talready exist in base.\n\t###\n\toverrideOnto: (base, newValues) ->\n\n\t\treturn base if not @isBareObject(newValues) or not @isBareObject(base)\n\n\t\tfor key, oldVal of base\n\n\t\t\tnewVal = newValues[key]\n\n\t\t\tcontinue if newVal is undefined\n\n\t\t\tif typeof newVal isnt 'object' or @isInstance newVal\n\n\t\t\t\tbase[key] = @clone newVal\n\n\t\t\t# newVal is a plain object\n\t\t\telse\n\n\t\t\t\tif typeof oldVal isnt 'object' or @isInstance oldVal\n\n\t\t\t\t\tbase[key] = @clone newVal\n\n\t\t\t\telse\n\n\t\t\t\t\t@overrideOnto oldVal, newVal\n\t\tbase\n\n\t###\n\tTakes a clone of 'base' and runs #overrideOnto on it\n\t###\n\toverride: (base, newValues) ->\n\n\t\t@overrideOnto @clone(base), newValues\n\n\tappend: (base, toAppend) ->\n\n\t\t@appendOnto @clone(base), toAppend\n\n\t# Deep appends values from `toAppend` to `base`\n\tappendOnto: (base, toAppend) ->\n\n\t\treturn base if not @isBareObject(toAppend) or not @isBareObject(base)\n\n\t\tfor own key, newVal of toAppend\n\n\t\t\tcontinue unless newVal isnt undefined\n\n\t\t\tif typeof newVal isnt 'object' or @isInstance newVal\n\n\t\t\t\tbase[key] = newVal\n\n\t\t\telse\n\n\t\t\t\t# newVal is a bare object\n\n\t\t\t\toldVal = base[key]\n\n\t\t\t\tif typeof oldVal isnt 'object' or @isInstance oldVal\n\n\t\t\t\t\tbase[key] = @clone newVal\n\n\t\t\t\telse\n\n\t\t\t\t\t@appendOnto oldVal, newVal\n\n\t\tbase\n\n\t# Groups\n\tgroupProps: (obj, groups) ->\n\n\t\tgrouped = {}\n\n\t\tfor name, defs of groups\n\n\t\t\tgrouped[name] = {}\n\n\t\tgrouped['rest'] = {}\n\n\t\t`top: //`\n\t\tfor key, val of obj\n\n\t\t\tshouldAdd = no\n\n\t\t\tfor name, defs of groups\n\n\t\t\t\tunless Array.isArray defs\n\n\t\t\t\t\tdefs = [defs]\n\n\t\t\t\tfor def in defs\n\n\t\t\t\t\tif typeof def is 'string'\n\n\t\t\t\t\t\tif key is def\n\n\t\t\t\t\t\t\tshouldAdd = yes\n\n\t\t\t\t\telse if def instanceof RegExp\n\n\t\t\t\t\t\tif def.test key\n\n\t\t\t\t\t\t\tshouldAdd = yes\n\n\t\t\t\t\telse if def instanceof Function\n\n\t\t\t\t\t\tif def key\n\n\t\t\t\t\t\t\tshouldAdd = yes\n\n\t\t\t\t\telse\n\n\t\t\t\t\t\tthrow Error 'Group definitions must either\n\t\t\t\t\t\tbe strings, regexes, or functions.'\n\n\t\t\t\t\tif shouldAdd\n\n\t\t\t\t\t\tgrouped[name][key] = val\n\n\t\t\t\t\t\t`continue top`\n\n\t\t\tgrouped['rest'][key] = val\n\n\t\tgrouped","module.exports =\r\n\r\n\t# pads a number with leading zeroes\r\n\t#\r\n\t# http://stackoverflow.com/a/10073788/607997\r\n\tpad: (n, width, z = '0') ->\r\n\r\n\t\tn = n + ''\r\n\r\n\t\tif n.length >= width\r\n\r\n\t\t\tn\r\n\r\n\t\telse\r\n\r\n\t\t\tnew Array(width - n.length + 1).join(z) + n","module.exports = utila =\n\n\tarray: require './array'\n\tclassic: require './classic'\n\tobject: require './object'\n\tstring: require './string'","module.exports = common =\n\n\t###\n\tChecks to see if o is an object, and it isn't an instance\n\tof some class.\n\t###\n\tisBareObject: (o) ->\n\n\t\tif o? and o.constructor is Object\n\n\t\t\treturn true\n\n\t\tfalse\n\n\t###\n\tReturns type of an object, including:\n\tundefined, null, string, number, array,\n\targuments, element, textnode, whitespace, and object\n\t###\n\ttypeOf: (item) ->\n\n\t\treturn 'null' if item is null\n\n\t\treturn typeof item if typeof item isnt 'object'\n\n\t\treturn 'array' if Array.isArray item\n\n\t\t# From MooTools\n\t\t# - do we even need this?\n\t\tif item.nodeName\n\n\t\t\tif item.nodeType is 1 then return 'element'\n\t\t\tif item.nodeType is 3 then return (/\\S/).test(item.nodeValue) ? 'textnode' : 'whitespace'\n\n\t\telse if typeof item.length is 'number'\n\n\t\t\tif item.callee then return 'arguments'\n\n\t\treturn typeof item\n\n\t# Deep clone of any variable.\n\t# From MooTools\n\tclone: (item, includePrototype = false) ->\n\n\t\tswitch common.typeOf item\n\n\t\t\twhen 'array' then return common._cloneArray item, includePrototype\n\n\t\t\twhen 'object' then return common._cloneObject item, includePrototype\n\n\t\t\telse return item\n\n\t###\n\tDeep clone of an object.\n\tFrom MooTools\n\t###\n\t_cloneObject: (o, includePrototype = false) ->\n\n\t\tif common.isBareObject o\n\n\t\t\tclone = {}\n\n\t\t\tfor key of o\n\n\t\t\t\tclone[key] = common.clone o[key], includePrototype\n\n\t\t\treturn clone\n\n\t\telse\n\n\t\t\treturn o unless includePrototype\n\n\t\t\treturn o if o instanceof Function\n\n\t\t\tclone = Object.create o.constructor.prototype\n\n\t\t\tfor key of o\n\n\t\t\t\tif o.hasOwnProperty key\n\n\t\t\t\t\tclone[key] = common.clone o[key], includePrototype\n\n\t\t\tclone\n\n\t###\n\tDeep clone of an array.\n\tFrom MooTools\n\t###\n\t_cloneArray: (a, includePrototype = false) ->\n\n\t\ti = a.length\n\n\t\tclone = new Array i\n\n\t\twhile i--\n\n\t\t\tclone[i] = common.clone a[i], includePrototype\n\n\t\tclone","require './_prepare'\n\narray = mod 'array'\n\ntest 'from', ->\n\n\tarray.from([1]).should.be.an.instanceOf Array\n\tarray.from([1])[0].should.equal 1\n\n# test 'clone', ->\n\n# \ta = [0, 1, 2]\n\n# \tb = array.clone a\n\n# \tb[0].should.equal 0\n# \tb[1].should.equal 1\n\n# \tb[0] = 3\n\n# \ta[0].should.equal 0\n\ntest 'pluck', ->\n\n\ta = [0, 1, 2, 3]\n\n\tafter = array.pluck a, 1\n\n\tafter.length.should.equal 3\n\n\tafter[0].should.equal 0\n\tafter[1].should.equal 2\n\tafter[2].should.equal 3\n\tafter.should.equal a\n\ntest 'pluckMultiple', ->\n\n\ta = [0, 1, 2, 3, 4, 5, 6]\n\n\tarray.pluckMultiple a, [0, 4, 2, 6]\n\n\ta.length.should.equal 3\n\ta[0].should.equal 1\n\ta[1].should.equal 3\n\ta[2].should.equal 5\n\ntest 'pluckItem', ->\n\n\ta = [0, 1, 2, 3, 2, 4, 2]\n\n\tarray.pluckItem a, 2\n\n\ta[0].should.equal 0\n\ta[1].should.equal 1\n\ta[2].should.equal 3\n\ta[3].should.equal 4\n\n\tarray.pluckItem([1], 2).length.should.equal 1\n\n\ntest 'pluckOneItem', ->\n\n\ta = [0, 1, 2, 3, 2, 4, 2]\n\n\tarray.pluckOneItem a, 2\n\n\ta[0].should.equal 0\n\ta[1].should.equal 1\n\ta[2].should.equal 3\n\ta[3].should.equal 2\n\ta[4].should.equal 4\n\ta[5].should.equal 2\n\n\ta = [1, 2]\n\n\tarray.pluckOneItem a, 1\n\n\ta.length.should.equal 1\n\ta[0].should.equal 2\n\n\tarray.pluckOneItem([], 1).length.should.equal 0\n\n\tarray.pluckOneItem([1], 2).length.should.equal 1\n\ntest 'plcukByCallback', ->\n\n\ta = [0, 1, 2, 3]\n\n\tarray.pluckByCallback a, (val, i) ->\n\n\t\treturn yes if val is 2\n\n\t\treturn no\n\n\ta[0].should.equal 0\n\ta[1].should.equal 1\n\ta[2].should.equal 3\n\ntest 'injectByCallback', ->\n\n\tshouldInject = (valA, valB, toInject) ->\n\n\t\tunless valA?\n\n\t\t\treturn yes if toInject <= valB\n\n\t\t\treturn no\n\n\t\tunless valB?\n\n\t\t\treturn yes if valA <= toInject\n\n\t\t\treturn no\n\n\t\treturn yes if valA <= toInject <= valB\n\n\t\treturn no\n\n\ta = [0.5, 1, 2.5, 2.5, 2.75, 2.75, 3]\n\n\tarray.injectByCallback a, 0, shouldInject\n\n\ta[0].should.equal 0\n\ta[1].should.equal 0.5\n\ta[7].should.equal 3\n\n\ta = [0.5, 1, 2.5, 2.5, 2.75, 2.75, 3]\n\n\tarray.injectByCallback a, 2.7, shouldInject\n\n\ta[0].should.equal 0.5\n\ta[4].should.equal 2.7\n\ta[5].should.equal 2.75\n\ta[7].should.equal 3\n\n\ta = [0.5, 1, 2.5, 2.5, 2.75, 2.75, 3]\n\n\tarray.injectByCallback a, 3.2, shouldInject\n\n\ta[0].should.equal 0.5\n\ta[4].should.equal 2.75\n\ta[6].should.equal 3\n\ta[7].should.equal 3.2","require './_prepare'\n\nobject = mod 'object'\n\ntest 'isBareObject', ->\n\n\tobject.isBareObject('a').should.equal false\n\n\tobject.isBareObject({'a': 'a'}).should.equal true\n\ntest 'typeOf', ->\n\n\tobject.typeOf('s').should.equal 'string'\n\tobject.typeOf(0).should.equal 'number'\n\tobject.typeOf(false).should.equal 'boolean'\n\tobject.typeOf({}).should.equal 'object'\n\tobject.typeOf(arguments).should.equal 'arguments'\n\tobject.typeOf([]).should.equal 'array'\n\ntest 'empty', ->\n\n\to =\n\n\t\ta: 1\n\t\tb: 2\n\n\n\tobject.empty o\n\n\to.should.not.have.property 'a'\n\to.should.not.have.property 'b'\n\ntest 'fastEmpty', ->\n\n\to =\n\t\ta: 1\n\t\tb: 2\n\n\n\tobject.fastEmpty o\n\n\to.should.not.have.property 'a'\n\to.should.not.have.property 'b'\n\ntest 'clone', ->\n\n\tobject.clone([1])[0].should.equal 1\n\tobject.clone({a:1}).a.should.equal 1\n\n\to = {a: 1}\n\n\tobject.clone(o).should.not.equal o\n\ntest 'clone [include prototype]', ->\n\n\tclass C\n\n\t\tconstructor: (@a) ->\n\n\t\tsayA: -> @a + 'a'\n\n\ta = new C 'a'\n\n\ta.sayA().should.equal 'aa'\n\n\tb = object.clone a, yes\n\n\tb.should.not.equal a\n\n\tb.constructor.should.equal C\n\n\tb.a.should.equal 'a'\n\n\tb.a = 'a2'\n\n\tb.sayA().should.equal 'a2a'\n\ntest 'clone [without prototype]', ->\n\n\tclass C\n\n\t\tconstructor: (@a) ->\n\n\t\tsayA: -> @a + 'a'\n\n\ta = new C 'a'\n\n\ta.sayA().should.equal 'aa'\n\n\tb = object.clone a, no\n\n\tb.should.equal a\n\ntest 'overrideOnto [basic]', ->\n\n\tonto =\n\t\ta: 'a'\n\t\tb:\n\t\t\tc: 'c'\n\t\t\td:\n\t\t\t\te: 'e'\n\n\twhat =\n\t\ta: 'a2'\n\t\tb:\n\t\t\tc: 'c2'\n\t\t\td:\n\t\t\t\tf: 'f2'\n\n\tobject.overrideOnto onto, what\n\n\tonto.a.should.equal 'a2'\n\tonto.b.should.have.property 'c'\n\tonto.b.c.should.equal 'c2'\n\tonto.b.d.should.not.have.property 'f'\n\tonto.b.d.e.should.equal 'e'\n\ntest 'override', ->\n\n\tonto =\n\n\t\ta: 'a'\n\n\t\tb:\n\n\t\t\tc: 'c'\n\n\t\t\td:\n\n\t\t\t\te: 'e'\n\n\twhat =\n\n\t\ta: 'a2'\n\n\t\tb:\n\n\t\t\tc: 'c2'\n\n\t\t\td:\n\n\t\t\t\tf: 'f2'\n\n\n\tonto2 = object.override onto, what\n\n\tonto2.a.should.equal 'a2'\n\tonto2.b.should.have.property 'c'\n\tonto2.b.c.should.equal 'c2'\n\tonto2.b.d.should.not.have.property 'f'\n\tonto2.b.d.e.should.equal 'e'\n\n\tonto.should.not.equal onto2\n\ndo ->\n\n\twhat =\n\n\t\ta: 'a2'\n\n\t\tc: ->\n\n\t\tz: 'z'\n\n\t\ty:\n\n\t\t\ta: 'a'\n\n\tonto =\n\n\t\ta: 'a'\n\n\t\tb: 'b'\n\n\ttest 'appendOnto [basic]', ->\n\n\t\tobject.appendOnto onto, what\n\n\t\tonto.a.should.equal 'a2'\n\t\tonto.b.should.equal 'b'\n\t\tonto.z.should.equal 'z'\n\n\ttest \"appendOnto [shallow copies instances]\", ->\n\n\t\tonto.c.should.be.instanceof Function\n\t\tonto.c.should.equal what.c\n\n\n\ttest \"appendOnto [clones objects]\", ->\n\n\t\tonto.should.have.property 'y'\n\t\tonto.y.a.should.equal 'a'\n\t\tonto.y.should.not.equal what.y\n\ntest 'groupProps', ->\n\n\tobj =\n\n\t\ta1: '1'\n\t\ta2: '2'\n\n\t\tb1: '1'\n\t\tb2: '2'\n\n\t\tc1: '1'\n\t\tc2: '2'\n\n\t\trest1: '1'\n\t\trest2: '2'\n\n\tgroups = object.groupProps obj,\n\n\t\ta: ['a1', 'a2']\n\n\t\tb: [/^b[0-9]+$/]\n\n\t\tc: (key) -> key[0] is 'c'\n\n\tgroups.a.should.have.property 'a1'\n\tgroups.a.a1.should.equal '1'\n\n\tgroups.a.should.have.property 'a2'\n\n\tgroups.b.should.have.property 'b1'\n\tgroups.b.should.have.property 'b2'\n\n\tgroups.c.should.have.property 'c1'\n\tgroups.c.should.have.property 'c2'\n\n\tgroups.rest.should.have.property 'rest1'\n\tgroups.rest.should.have.property 'rest1'\n\n\tgroups.rest.should.not.have.property 'c1'","path = require 'path'\n\npathToLib = path.resolve __dirname, '../lib'\n\nrequire('little-popo')(pathToLib)"]}